#!/usr/bin/perl -X
# Call: avgprp (no arguments)
# The program uses `cat tmp` as the setup file.

my $PROGRAMNAME = 'avgprp';
my $VERSION = '05.1';  
my $EDITDATE = '180611,1026';

#v01 -- taken from avgrsr v7
#v02 -- 
#v03 -- clean up for new version of PrepareForRun
#v05 -- averaging and sockett

$record{mode}=0;
$Nsweeps=0;

#====================
# PRE-DECLARE SUBROUTINES
#====================
use lib $ENV{MYLIB};
use perltools::MRtime;
use perltools::MRstatistics;
use perltools::MRutilities;
use perltools::MRradiation;
#use POSIX;
#use Scalar::Util qw(looks_like_number);
#v0 => looks_like_number($w[0]) && $w[0]>=0 && $w[0]<=5 ? $w[0]*$slope0 + $offset0 : -999,

# 
my $setupfile = `cat tmp`;
chomp($setupfile);
if(! -f $setupfile){print"$setupfile does NOT exist\n"; exit 1}
#print "SETUP FILE = $setupfile\n";

# DEFINE OUT PATH
my $datapath =  FindInfo($setupfile,'RT OUT PATH', ': ');
if ( ! -d $datapath ) { print"!! RT OUT PATH - ERROR, $datapath\n"; exit 1 }
#print"debug:datapath = $datapath\n";

#=======================
# TELNET SERVER
#======================
$telnetserverip = FindInfo($setupfile,'TELNET SERVER IP',':');
#print"TELNET SERVER IP = $telnetserverip\n";
if($telnetserverip==0){print"No telnet socket output\n"}
else{
        $telnetserverport = FindInfo($setupfile,'TELNET SERVER PORT',':');
        #print"TELNET SERVER PORT = $telnetserverport\n";
        $socketprogram = FindInfo($setupfile,'TELNET PROGRAM',':');  # v6 udp or sock
        #print"TELNET PROGRAM = $socketprogram\n";                    # v6
}

$str="\"PROGRAM: $PROGRAMNAME V$VERSION, Edit $EDITDATE,  RUN  ".dtstr(now(),'short')."\"";
if($telnetserverip == 0){}
else{
        system "$socketprogram $telnetserverip $telnetserverport $str";
}

	# PSP CAL
@x=FindLines($setupfile,"% PSP CALIBRATION",1);
@y=split /[ \t]+/,$x[1];
@pspcal=($y[0], $y[1]); 
	# PIR CAL 
@x=FindLines($setupfile,"% PIR CALIBRATION",1);
@y=split /[ \t]+/,$x[1];
@pircal=($y[0], $y[1]); 

@x=FindLines($setupfile,"% TCASE FIT",13);
	# CASE
@y=split /[ \t]+/,$x[1];
@casecal=($y[0], $y[1], $y[2], $y[3]); 
	# DOME
@y=split /[ \t]+/,$x[3];
@domecal=($y[0], $y[1], $y[2], $y[3]); 
	# % K COEFFICIANT
$Kcoefficient = $x[5];
	# SIGMA
$sigma = $x[7];
	# EPSILON
$epsilon = $x[9];
	# BATTERY
@y=split /[ \t]+/,$x[11];
@battcal=($y[0], $y[1]); 

	# TILT CAL
#FIXED TILT FLAG: 0
$fixedtiltflag = FindInfo($setupfile,"FIXED TILT FLAG");
if($fixedtiltflag == 1){
	$fixedpitch = FindInfo($setupfile,"TCM FIXED PITCH");
	$fixedroll = FindInfo($setupfile,"TCM FIXED ROLL");
	$fixedheading = FindInfo($setupfile,"TCM FIXED HEADING");
}
else {
	$pitchcorrection = FindInfo($setupfile,"TCM PITCH CORRECTION");
	$rollcorrection = FindInfo($setupfile,"TCM ROLL CORRECTION");
	$headingcorrection = FindInfo($setupfile,"TCM HEADING CORRECTION");
}
$jdfold=0;
#----------------- HEADER ----------------
$header = "PROGRAM: $PROGRAMNAME (Version $VERSION, Editdate $EDITDATE)
RUN TIME: " . dtstr(now()) . " utc\n";

$str = FindInfo($setupfile,'EXPERIMENT NAME', ': ');
$header = $header."EXPERIMENT NAME: $str\n";

$isarsn = FindInfo($setupfile,'PRP SERIAL NUMBER', ': ');
$header = $header."PRP SERIAL NUMBER: $isarsn\n";

$headsn = FindInfo($setupfile,'HEAD SERIAL NUMBER', ': ');
$header = $header."HEAD SERIAL NUMBER: $headsn\n";

if($fixedtiltflag == 0){
	$header=$header."TILT CORRECTION:
  PITCH = TCMpitch + $pitchcorrection
  ROLL = TCMROLL + $rollcorrection
  HEADING = TCMheading + $headingcorrection\n";
} else {
	$header=$header."FIXED TILT:
  PITCH = $fixedpitch
  ROLL = $fixedroll
  HEADING = $fixedheading\n";
}

$ShadowRatioThreshold = FindInfo($setupfile,'PRP SHADOW THRESHOLD', ':');
$header = $header."PRP SHADOW THRESHOLD: $ShadowRatioThreshold\n";

my $avgsecs = FindInfo($setupfile,'PRP AVERAGING TIME SECS', ': ');
$header = $header."PRP AVERAGING TIME SECS: $avgsecs\n";
$header = $header."TIME MARK IS CENTERED ON AVERAGING INTERVAL\n";

$Nsamp_min = 3;
$header = $header."MINIMUM NO. SAMPLES FOR AN AVERAGE: $Nsamp_min\n";

## PRP SHUTDOWN CONTROL
# If shutdownflag == 1 and avg from $shutdownchannel < $shutdownthreshold == go to LOW
$shutdownflag = FindInfo($setupfile, 'PRP SHUTDOWN CONTROL',':');
$header = $header."PRP SHUTDOWN CONTROL: $shutdownflag\n";

# channel 0-6
$shutdownchannel = FindInfo($setupfile, 'PRP SHUTDOWN CHANNEL',':');
$header = $header."PRP SHUTDOWN CHANNEL: $shutdownchannel\n";

$shutdownthreshold = FindInfo($setupfile, 'PRP SHUTDOWN THRESHOLD',':');
$header = $header."PRP SHUTDOWN THRESHOLD: $shutdownthreshold\n";

$missing = FindInfo($setupfile,'MISSING VALUE');
$header = $header."MISSING VALUE: $missing\n";

@strings = FindLines($setupfile, 'PRP COMMENTS:', 100 );
$header = $header."PRP COMMENTS:\n";
if ( $#strings > 0 ){
	for($i=1; $i<=$#strings; $i++) { 
		if ( $strings[$i] =~ /^END/i ) {last}
		else { $header = $header."$strings[$i]\n";}
	}
}	

## PRINT OUT THE HEADER
my $avginfofile= "$datapath/prpavg_info.txt";
printf"avginfofile = $avginfofile\n";
open(HDR, ">>$avginfofile") or die;	
print HDR "===============================================================================\n";
print HDR "$header
=======
RAW DATA REPLY
High mode
<<PRPH nrec yyyy MM dd hh mm ss mode thead shad thres  pitch roll adc0 adc1 adc2 adc3>>
Low Mode
<<PRPL nrec yyyy MM dd hh mm ss mode thead pitch roll az adc0 adc1 adc2 adc3
--------
where
nrec is from the input record counter,
yyyy MM dd hh mm ss is the UTC time.
mode = 0/1 for low or high mode.
thead = head temperature in degC.
shad = shadow ratio, no units
thres = shadow ratio threshold to define good direct solar beam, no units.
pitch = system pitch, bow up, deg.
roll = system roll, port up, deg.
az = flux gate compass, degM.
adc0 = 16-bit ADC channel 0, PSP, millivolts.
adc1 = 16-bit ADC channel 0, PIR thermopile, millivolts.
adc2 = 16-bit ADC channel 0, Tcase, millivolts.
adc3 = 16-bit ADC channel 0, Tdome, millivolts.


High mode output
1: nrec yyyy MM dd hh mm ss mode Theadmv shadow threshold  pitch roll adc0 adc1 adc2 adc3
2: global 2--7 narrow band channels in millivolts
3: global 2--7 narrow band channels in millivolts
4: global1, bin1,...bin11,bin12,... bin23, global1 is the broadband channel, in millivolts
5: global2, bin1,...bin11,bin12,... bin23, global1 for 415 nm in millivolts
6: global3, bin1,...bin11,bin12,... bin23, global1 for 500 nm in millivolts
7: global4, bin1,...bin11,bin12,... bin23, global1 for 615 nm in millivolts
8: global5, bin1,...bin11,bin12,... bin23, global1 for 675 nm in millivolts
9: global6, bin1,...bin11,bin12,... bin23, global1 for 872 nm in millivolts
10:global7, bin1,...bin11,bin12,... bin23, global1 for 940 nm in millivolts
========\n";
close HDR;
# ============ DATA PROCESSING PARAMETERS ===========
$SampleFlag = 0;		# 0=standard   1=start at first sample time.

#====================
# OTHER GLOBAL VARIABLES
#====================
use constant YES => 1;
use constant NO => 0;
use constant PI => 3.14159265359;


# DEFINE VARS  VARS='p' -> sum_p{sum sumsq,max,min,n} -> samp_p
@VARS = ('thead','shadow','sw','lw','psp','pir','tcase','tdome','p','r','az','batt');
@VARS = (@VARS,'g1','g2','g3','g4','g5','g6','g7');
my $cmd = "\@VARS = (\@VARS,'a000'";
for($i=1; $i<=7; $i++){
	for($j=1; $j<=23; $j++){
		$cmd=$cmd.sprintf ",'a%d%02d'",$i,$j;
	}
}
$cmd=$cmd.');';
eval $cmd;
#$ii=0;foreach(@VARS){print "$ii  $_\n"; $ii++} die;
# CLEAR ACCUMULATOR ARRAYS
ClearAccumulatorArrays();		# Prepare for averaging first record

# WAIT FOR THE FIRST RECORD -- the process is in hold until the first good record come in.
$N_H = 0;    #N_H is the count of H modes in a full sample.

$dt=now();
@jd=dt2jdf($dt);
$jdold=int($jd[1]);
@dt=datevec($dt);
$avgoutfile=sprintf"$datapath/avgout_%4d%02d%02d.txt",$dt[0],$dt[1],$dt[2];
$rawoutfile=sprintf"$datapath/avgraw_%4d%02d%02d.txt",$dt[0],$dt[1],$dt[2];
# $tmpfile="/tmp/avgprpdebug";
# open D,">>$tmpfile" or die;
# print D "Open debug\n";
# close D;

$Nsweeps=0;
while ( 1 ) {
	$ix=ReadNextRecord($datapath);
	if($ix == 1 ) {last}
};
# $str="First record";  print"$str\n";
# system "$socketprogram $telnetserverip $telnetserverport \"$str\"";

AccumulateStats();

##=================
## SAMPLE TIME MARKS
##==============
my ($dt_samp,$dt1,$dt2);
($dt_samp, $dt1, $dt2) = ComputeSampleEndPoints ( now(), $avgsecs, $SampleFlag);
$str=sprintf"<<NEXT SAMPLE: dt_samp=%s, dt1=%s, dt2=%s>>\n", dtstr($dt_samp,'short'), dtstr($dt1,'short'), dtstr($dt2,'short');

#================
# BEGIN THE MAIN SAMPLING LOOP
# ===============
while ( 1 ) {
	#=====================
	# FILE NAMES
	#=====================
	$dt=now();
	@jd=dt2jdf($dt);
	if(int($jd[1]) != $jdold){
		$jdold=int($jd[1]);
		@dt=datevec($dt);
		#print"new day\n";
		$avgoutfile=sprintf"$datapath/avgout_%4d%02d%02d.txt",$dt[0],$dt[1],$dt[2];
		#print"New avg file $avgoutfile\n";
		$rawoutfile=sprintf"$datapath/avgraw_%4d%02d%02d.txt",$dt[0],$dt[1],$dt[2];
		#print"New raw file $rawoutfile\n";
	}
	#=====================
	# PROCESS ALL RECORDS IN AVG TIME
	#=====================
 	while ( 1 ) {
		#---READ NEXT RECORD (loop)---
		while ( 1 )	{
			$ix=ReadNextRecord($datapath);
			if($ix == 1 ) {last}
		}
		#---NEW RECORD, CHECK FOR END---
		if ( $record{dt} >= $dt2 ) { last; }
		else {		
			AccumulateStats();
# $str="Line 284";  print"$str\n";
# system "$socketprogram $telnetserverip $telnetserverport \"$str\"";
		}
	}
	#====================
	# COMPUTE SAMPLE STATS
	#====================
# $str="Line 291";  print"$str\n";
# system "$socketprogram $telnetserverip $telnetserverport \"$str\"";
	ComputeStats();	
		#xx debug
	
	SaveStats($dt_samp, $datapath);
	$Nsweeps=0;
	if ( $record{mode} == 1 ) {$N_H=1} else {$N_H=0}
	
	ClearAccumulatorArrays();		# Prepare for averaging first record
	($dt_samp, $dt1, $dt2) = ComputeSampleEndPoints( $record{dt}, $avgsecs, 0);	#increment $dt1 and $dt2 
	#v4 printf"NEXT SAMPLE: dt_samp=%s, dt1=%s, dt2=%s\r\n", dtstr($dt_samp,'short'), dtstr($dt1,'short'), dtstr($dt2,'short');
	AccumulateStats(); 			# deals with the current record
	#=======================
	# END OF THE LOOP
	#=======================
}
exit(0);


#*************************************************************/
sub ReadNextRecord
{
	my ($datapath) = @_;
	
	my ($n, $str, $cmd ,$dtrec, $Nfields, $ftmp, $i, $j, $x);
	my @r;
	my $flag = 0;
	my @dt;	
	
	##==================
	## WAIT FOR INPUT
	## Send out a prompt and wait
	##==================
	print"PRP--\n";
	chomp($str=<STDIN>);
	
# timestamp   mode thead pitch1 roll1 az1 adc10 adc11 adc12 adc13 adc14 adc15 adc16 adc17 pitch2 roll2 az2 adc20 adc21 adc22 adc23 adc24 adc25 adc26 adc27
#             0    1     2      3     4   5     6     7     8     9     10    11    12    13     14    15  16    17    18    19    20    21    22    23

# shadow threshold g11 g12 g13 g14 g15 g16 g17 g21 g22 g23 g24 g25 g26 g27
#   24      25     26  27  28  29  30  31  32  33  34  35  36  37  38  39 

# s01 s02 ... s23  
#  (40  41     62)   (63...85)  (86...108)  (109... 131)  (132...154) (155...177) (178...200)
# 
# Low mode # 0...23
# High, no shadow # 0...39
# High with shadow # 200
	# short strings 
	if (length($str) < 50) { 
		return (0) 
	}
	else {
		@av=();
		## COMMANDS
		if ( $str =~ /quit/i ) {print"QUIT PRP avg program\n"; exit 0 }
		$str=~s/[\#]+//g;
		$record{dt} = now();
		$timestamp = dtstr($record{dt},'ISO');
	
			# SPLIT 
		@r=split /[ ]+/, $str;
# 		print"str=$str\n";
# 		$i=0; foreach(@r){print"$i, $_\n"; $i++}
# 		die;

		$Nfields = $#r;	
		$record{mode}=$r[0];
		$record{thead}=$r[1];
		if($r[0]>0){$record{shadow}=$r[24]}else{$record{shadow}=0}
		#==============
		# AVERAGE AT EACH HORIZON
		#==============
		# PITCH, ROLL, AZ
		for($i=2;$i<=3;$i++){
			$n=0; $x=0;
			if($r[$i]>-20 && $r[$i]<20){
				$n++; $x=$r[$i];
			}
			if($r[$i+11]>-20 && $r[$i+11]<20){
				$n++; $x+=$r[$i+11];
			}
			if($n==0){$x=$missing} else{$x=$x/$n}
			push @av,$x;
		}
		# 16 bit ADC
		for($i=4; $i<=12; $i++){
			$n=0; $x=0;
			if($r[$i]>-100 && $r[$i]<4000){
				$n++; $x=$r[$i];
			}
			if($r[$i+11]>-100 && $r[$i+11]<4000){
				$n++; $x+=$r[$i+11];
			}
			if($n==0){$x=$missing} else{$x=$x/$n}
			push @av,$x;
		}
		#$i=0; foreach(@av){printf"debug:%3d %.3f\n",$i,$_; $i++} die;
		#==============
		# FILL IN RECORD
		#==============
		# p,r,az
		if($fixedtiltflag == 0){
			%record=(%record,
				p => $av[0]+$pitchcorrection,
				r => $av[1]+$rollcorrection,
				az => $av[2]+$headingcorrection,
			);
		}
		else {
			%record=(%record,
				p => $fixedpitch+0.0001,
				r => $fixedroll+0.0001,
				az => $fixedheading+0.0001
			);
		}
		# radiometers
		%record=(%record,
			psp => $av[3],
			pirv => $av[4],
			case => $av[5],
			dome => $av[6],
			batt => $av[10]*$battcal[0]+$battcal[1],
			sw => $av[3]*$pspcal[0]+$pspcal[1],
			pir => $av[4]*$pircal[0]+$pircal[1]
		);
			# T CASE
		if($av[5]<=0){$record{case}=$missing;}
		else {
			$x=log($av[5]);
			$y=$casecal[0]*$x*$x*$x + $casecal[1]*$x*$x + $casecal[2]*$x + $casecal[3];
			if($y<=0){
				$record{tcase}=$missing;
			}else{
				$record{tcase} = 1/$y -273.15;
			}
		}
			# T DOME
		if($av[6]<=0){$record{dome}=$missing;}
		else {
			$x=log($av[6]);
			$y=$domecal[0]*$x*$x*$x + $domecal[1]*$x*$x + $domecal[2]*$x + $domecal[3];
			if($y<=0){
				$record{tdome}=$missing;
			}else{
				$record{tdome} = 1/$y -273.15;
			}
		}
	
		@x = ComputeLongwave($record{pir},$record{tcase},$record{tdome},$Kcoefficient,$sigma,$epsilon,$missing);
		$record{lw}=$x[0];
#@VARS = ('thead','shadow','sw','lw','psp','pir','tcase','tdome','p','r','az','batt');
	
# 		printf"mode = %d\n", $record{mode};
# 		printf"Thead = %.2f\n", $record{thead};
# 		printf"pitch=%.2f\n",$record{p};
# 		printf"roll=%.2f\n",$record{r};
# 		printf"heading=%.2f\n",$record{az};
# 		printf"psp=%.2f  %.2f\n",$record{psp}, $record{sw};
# 		printf"pir=%.2f   %.2f\n",$record{pirv}, $record{pir};
# 		printf"case=%.2f   %.2f\n",$record{case}, $record{tcase};
# 		printf"dome=%.2f   %.2f\n",$record{dome}, $record{tdome};
# 		printf"lw = %.2f\n", $record{lw};
# 		printf"batt=%.2f\n",$record{batt};
# 		die;
			# WIPRR -- PRP BASIC DATA
		$str=sprintf"\$WIPRR,%s,%d,%.1f,%.1f,%d,%.2f,%.2f,%.2f,%.2f,%.2f,%.1f,%.1f,%.1f,%.1f*",
		$timestamp,$record{mode},$record{thead},$record{shadow},$ShadowRatioThreshold,$record{sw},$record{lw},
		$record{pir},$record{tcase},$record{tdome},$record{p},$record{r},$record{az},$record{batt};
		$str=$str.NmeaChecksum($str);
		open F,">>$rawoutfile" or die;
		print F "$str\n";
		#print "$str\n";  #-->> PRINT WIPRR
# $str =~ s/\$//;
# system "$socketprogram $telnetserverip $telnetserverport \"$str\"";
				# CHANGE INPUT TYPE -- HIGH TO LOW		
		if ( $record{mode}==0 && $N_H > 0) {
			print"Begin low input, reset Accumulators\n";
			ClearAccumulatorArrays();
			$N_H=0;
		}
				# CHANGE INPUT TYPE -- LOW TO HIGH
		if ( $r[7]==1 && $N_H == 0) {
			print"Begin high input, reset Accumulators\n";
			ClearAccumulatorArrays();
		}
	
			# RECORD ARRAY = missing 
		for( $i=$NHsweeps[0]; $i <= $NHsweeps[1]; $i++) {
			$cmd = sprintf("\$record\{a%03d\} = \$missing;",$i-$NHsweeps[0]);
			eval($cmd);
		}
		#===================
		# FILL RECORD ARRAY, HIGH MODE
		#===================
		if ( $record{mode}==1 ) {
			# GLOBAL 
			for($i=26; $i<=32; $i++){
				$n=0; $x=0;
				if($r[$i]>0 && $r[$i]<4000){
					$n++; $x=$r[$i];
				}
				if($r[$i+8]>0 && $r[$i+8]<4000){
					$n++; $x+=$r[$i+8];
				}
				if($n==0){$x=$missing} else{$x=$x/$n}
				$cmd=sprintf"\$record{g%d}=\$x;",$i-25;
				eval $cmd;
			}
			# PRINT OUT
			$str=sprintf"\$WIPRG,%s,%.1f",$timestamp,$record{shadow};
			for($i=1; $i<=7; $i++){
				$cmd=sprintf"\$str=\$str.sprintf\",%%.1f\",\$record{g%d};",$i;
				#print"cmd = $cmd\n";
				eval $cmd;
			}
			$str=$str."*";
			$str=$str.NmeaChecksum($str);
			print F " $str\n";		
			print " $str\n";  #-->> PRINT WIPRG
# $str=~s/\$//;
# system "$socketprogram $telnetserverip $telnetserverport \"$str\"";
			$N_H++;
				
				# HIGH -- SHADOW
			if( $#r > 39 && $record{shadow} >= $ShadowRatioThreshold){
				$i0=40;
				$Nsweeps++;
				for( $i=1; $i<=7; $i++) {
					$str="\$WIPR".sprintf"%d,%s",$i,$timestamp;
					for($j=1; $j<=23; $j++){
						$cmd = sprintf("\$record\{a%d%02d\} = \$r\[%d\];",$i,$j,$i0);
						$i0++;
						#print"$cmd\n";
						eval($cmd);
						$cmd=sprintf"\$str=\$str.sprintf\",%%d\",\$record{a%d%02d};",$i,$j;
						#print"$cmd\n";
						eval $cmd;
					}
					$str=$str."*";
					$str=$str.NmeaChecksum($str);
					print F " $str\n";
					#print " $str\n";  #-->> PRINT WIPR1...WIPR7
# $str=~s/\$//;
# system "$socketprogram $telnetserverip $telnetserverport \"$str\"";
				}
			}
		}
		close F;
	}
	return (1);
}

#*************************************************************/
sub ClearAccumulatorArrays
# CLEAR ACCUMULATOR ARRAYS FOR ALL AVERAGING
{
	my ($i, @x, @y);
	#=================
	#	SET UP THE HASHES
	#=================
	my %xx = ( sum => 0, sumsq => 0, n => 0, min => 1e99, max => -1e99 );
	my %yy = ( mn => $missing, std => $missing, n => 0, min => $missing, max => $missing );
	# ---- INITIALIZE HASHES -------
	foreach ( @VARS ) 
	{
		eval "%sum_$_ = %xx;   %samp_$_ = %yy;";
	}
}


#*************************************************************/
sub AccumulateStats
# Add to the sums for statistical averages
# Increments global hash variable %sum_xx(sum, sumsq, n, min, max) where
#  xx = (kt, bb2t3, bb2t2, bb2t1, bb1t3, bb1t2, bb1t1, Vref, bb1ap1, bb1bb2ap2, bb2ap3, kttempcase,
#	wintemp, tt8temp, Vpwr, sw1, sw2, pitch, roll, sog, cog, az, pnitemp, lat, lon, sog, var, kttemp )
{
	my ($d1, $d2, $ii);
	my ($x, $y, $s);
	
		foreach ( @VARS )
		{
			my $zstr = sprintf("\@s = %%sum_%s;  %%sum_%s = Accum (\$record{%s}, \@s);", $_, $_, $_);
			eval $zstr;
		}
	#Test, print out variables.
	
}

#*************************************************************/
sub Accum
# Accum(%hash, $datum);   global: $missing
{
	my ($x, @a) = @_;
	my %r = @a;
	#printf("Accum : %.5f\n", $x);
	if ( $x > $missing )
	{
		$r{sum} += $x;
		$r{sumsq} += $x * $x;
		$r{n}++;
		$r{min} = min($r{min}, $x);
		$r{max} = max($r{max}, $x);
		@a = %r;
	}
	return( @a );
}

#*************************************************************/
sub ComputeStats
# ComputeStats();
{
	my $i;
	my ($mean, $stdev, $n, $x, $xsq);
	
	#====================
	# SCALARS
	# sub (mn, stdpcnt, n, min, max) = stats(sum, sumsq, N, min, max, Nsamp_min);
	#=====================
	foreach ( @VARS ) {
		my $zz = sprintf( "( \$samp_\%s{mn}, \$samp_\%s{std}, \$samp_\%s{n}, \$samp_\%s{min}, \$samp_\%s{max}) =
			stats1 ( \$sum_\%s{sum},  \$sum_\%s{sumsq},  \$sum_\%s{n},  \$sum_\%s{min},  \$sum_\%s{max}, \$Nsamp_min, \$missing );",
			$_,$_,$_,$_,$_,$_,$_,$_,$_,$_);
		eval $zz ;
	}
}
	

#*************************************************************/
sub SaveStats
## Create a string with all the data then save the string to file and print out 
# with framing
{
	my ($dt, $path) = @_;
	my $modecommand=1;
	my $str = dtstr($dt,'iso');
	my $timestr = dtstr($dt,'ssv');
	my ($i,$j,$glavg);
	my ($Thead, $pitch,$pstd,$roll,$rstd);
	my @wmn=();  @wstd=();

	# use sw for threshold
	$glavg = $samp_sw{mn};
	# PRP SHUTOFF FLAG
	if( ($shutdownflag && $glavg < $shutdownthreshold) || $glavg == $missing )
		{$modecommand = 0} 			# GLAVG LOW, TURN FRSR OFF
	else {$modecommand = -1} 	# GLAVG HIGH OR SHUTDOWNFLAG =0, DO NOTHING , v6a
		
	
	## STANDARD OUT FILE
	open(F,">>$avgoutfile") or die;

	# OUT PUT HIGH OR LOW
	 #20180612,132200, 9, Vin 13.9, Th 39.76(0.05), SW 134.04(0.89), LW 360.48(0.08), 
	 #pitch 1.0(0.0), roll 0.0(0.0), 0
	$strout=sprintf"%s, %d, Vin %.1f, Th %.2f(%.2f), SW %.2f(%.2f), LW %.2f(%.2f), ".
	"pitch %.1f(%.1f), roll %.1f(%.1f), %d" ,
	dtstr($dt_samp,'short'), $N_H, $samp_batt{mn},
	$samp_thead{mn},$samp_thead{std},$samp_sw{mn},$samp_sw{std},$samp_lw{mn},$samp_lw{std},
	$samp_p{mn},$samp_p{std},$samp_r{mn},$samp_r{std},
	$modecommand;
if($telnetserverip == 0){}else{system "$socketprogram $telnetserverip $telnetserverport \"$strout\""}
	printf F "%s\n", $strout;  ## to output file
	
	# HIGH MODE - OUTPUT
	if ($N_H >= $Nsamp_min ) {		
		# GLOBAL
		 #  Shad 3.1(1.2), Globals 317.4(119.0), 281.8(105.7), 276.9(103.9), 
		 #320.4(120.2), 415.2(155.7), 392.9(147.4), 333.3(125.0)
  		$strout=sprintf "  Shad %.1f(%.1f), Globals %.1f(%.1f), %.1f(%.1f), %.1f(%.1f), %.1f(%.1f), %.1f(%.1f), %.1f(%.1f), %.1f(%.1f)",
		$samp_shadow{mn},$samp_shadow{std},$samp_g1{mn},$samp_g1{std},
		$samp_g2{mn},$samp_g2{std},$samp_g3{mn},$samp_g3{std},
		$samp_g4{mn},$samp_g4{std},$samp_g5{mn},$samp_g5{std},
		$samp_g6{mn},$samp_g6{std},$samp_g7{mn},$samp_g7{std}; 
if($telnetserverip == 0){}else{system "$socketprogram $telnetserverip $telnetserverport \"$strout\""}
		printf F "%s\n", $strout;  ## to output file

		# SWEEP BINS
		# note naming -- aji, j=1..7, i=01..23, 'a%d%02d'",$j,$i;
		if($samp_shadow{mn} >= $ShadowRatioThreshold) {
			for($j=0; $j<7; $j++) {
				$str='';
				for($i=0; $i<23; $i++) { 
					eval(sprintf("\$str = \$str.sprintf \" %%6.1f\", \$samp_a%d%02d{mn};",$j,$i));
				}
				print F "$str\n";
				print "$str\n";
if($telnetserverip == 0){}else{system "$socketprogram $telnetserverip $telnetserverport \"$str\""}
			}
		}
	}
	close F;
	return 1;
}
