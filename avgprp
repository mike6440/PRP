#!/usr/bin/perl -X

my $PROGRAMNAME = 'avgprp';
my $VERSION = '02';  
my $EDITDATE = '150626';

#v01 -- taken from avgrsr v7

@NL =(8,30);
@NH=(8,46);
#@NHsweeps=(8,207);

$record{mode}=0;
$Nsweeps=0;

#====================
# PRE-DECLARE SUBROUTINES
#====================
use lib $ENV{MYLIB};
use perltools::MRtime;
use perltools::MRstatistics;
use perltools::MRutilities;
use perltools::MRradiation;
#use POSIX;
#use Scalar::Util qw(looks_like_number);
#v0 => looks_like_number($w[0]) && $w[0]>=0 && $w[0]<=5 ? $w[0]*$slope0 + $offset0 : -999,

my $setupfile = `cat tmp`;
#print "SETUP FILE = $setupfile\n";


#print"\n======================== START PROCESSING $PROGRAMNAME =======================\n";
# DEFINE OUT PATH
my $datapath =  FindInfo($setupfile,'RT OUT PATH', ': ');
if ( ! -d $datapath ) { print"!! RT OUT PATH - ERROR, $datapath\n"; die }
#print"test datapath = $datapath\n";

	# PSP CAL
@x=FindLines($setupfile,"% PSP CALIBRATION",1);
@y=split /[ \t]+/,$x[1];
@pspcal=($y[0], $y[1]); 
	# PIR CAL 
@x=FindLines($setupfile,"% PIR CALIBRATION",1);
@y=split /[ \t]+/,$x[1];
@pircal=($y[0], $y[1]); 

@x=FindLines($setupfile,"% TCASE FIT",13);
	# CASE
@y=split /[ \t]+/,$x[1];
@casecal=($y[0], $y[1], $y[2], $y[3]); 
	# DOME
@y=split /[ \t]+/,$x[3];
@domecal=($y[0], $y[1], $y[2], $y[3]); 
	# % K COEFFICIANT
$Kcoefficient = $x[5];
	# SIGMA
$sigma = $x[7];
	# EPSILON
$epsilon = $x[9];
	# BATTERY
@y=split /[ \t]+/,$x[11];
@battcal=($y[0], $y[1]); 

	# TILT CAL
#FIXED TILT FLAG: 0
$fixedtiltflag = FindInfo($setupfile,"FIXED TILT FLAG");
if($fixedtiltflag == 1){
	$fixedpitch = FindInfo($setupfile,"TCM FIXED PITCH");
	$fixedroll = FindInfo($setupfile,"TCM FIXED ROLL");
	$fixedheading = FindInfo($setupfile,"TCM FIXED HEADING");
}
else {
	$pitchcorrection = FindInfo($setupfile,"TCM PITCH CORRECTION");
	$rollcorrection = FindInfo($setupfile,"TCM ROLL CORRECTION");
	$headingcorrection = FindInfo($setupfile,"TCM HEADING CORRECTION");
}

$jdfold=0;
#----------------- HEADER ----------------
$header = "PROGRAM: $PROGRAMNAME (Version $VERSION, Editdate $EDITDATE)
RUN TIME: " . dtstr(now()) . " utc\n";

$str = FindInfo($setupfile,'EXPERIMENT NAME', ': ');
$header = $header."EXPERIMENT NAME: $str\n";

$isarsn = FindInfo($setupfile,'PRP SERIAL NUMBER', ': ');
$header = $header."PRP SERIAL NUMBER: $isarsn\n";

$headsn = FindInfo($setupfile,'HEAD SERIAL NUMBER', ': ');
$header = $header."HEAD SERIAL NUMBER: $headsn\n";

$ShadowRatioThreshold = FindInfo($setupfile,'PRP SHADOW THRESHOLD', ':');
$header = $header."PRP SHADOW THRESHOLD: $ShadowRatioThreshold\n";

my $avgsecs = FindInfo($setupfile,'PRP AVERAGING TIME SECS', ': ');
$header = $header."PRP AVERAGING TIME SECS: $avgsecs\n";
$header = $header."TIME MARK IS CENTERED ON AVERAGING INTERVAL\n";

$Nsamp_min = 3;
$header = $header."MINIMUM NO. SAMPLES FOR AN AVERAGE: $Nsamp_min\n";

## PRP SHUTDOWN CONTROL
# If shutdownflag == 1 and avg from $shutdownchannel < $shutdownthreshold == go to LOW
$shutdownflag = FindInfo($setupfile, 'PRP SHUTDOWN CONTROL',':');
$header = $header."PRP SHUTDOWN CONTROL: $shutdownflag\n";

# channel 0-6
$shutdownchannel = FindInfo($setupfile, 'PRP SHUTDOWN CHANNEL',':');
$header = $header."PRP SHUTDOWN CHANNEL: $shutdownchannel\n";

$shutdownthreshold = FindInfo($setupfile, 'PRP SHUTDOWN THRESHOLD',':');
$header = $header."PRP SHUTDOWN THRESHOLD: $shutdownthreshold\n";

$missing = FindInfo($setupfile,'MISSING VALUE', ': ');
$header = $header."MISSING NUMBER: $missing\n";

@strings = FindLines($setupfile, 'PRP COMMENTS:', 100 );
$header = $header."PRP COMMENTS:\n";
if ( $#strings > 0 ){
	for($i=1; $i<=$#strings; $i++) { 
		if ( $strings[$i] =~ /^END/i ) {last}
		else { $header = $header."$strings[$i]\n";}
	}
}	

## PRINT OUT THE HEADER
my $avginfofile= "$datapath/prpavg_info.txt";
printf"avginfofile = $avginfofile\n";
open(HDR, ">>$avginfofile") or die;	
print HDR "===============================================================================\n";
print HDR "$header
=======
RAW DATA REPLY
High mode
<<PRPH nrec yyyy MM dd hh mm ss mode thead shad thres  pitch roll adc0 adc1 adc2 adc3>>
Low Mode
<<PRPL nrec yyyy MM dd hh mm ss mode thead pitch roll az adc0 adc1 adc2 adc3
--------
where
nrec is from the input record counter,
yyyy MM dd hh mm ss is the UTC time.
mode = 0/1 for low or high mode.
thead = head temperature in degC.
shad = shadow ratio, no units
thres = shadow ratio threshold to define good direct solar beam, no units.
pitch = system pitch, bow up, deg.
roll = system roll, port up, deg.
az = flux gate compass, degM.
adc0 = 16-bit ADC channel 0, PSP, millivolts.
adc1 = 16-bit ADC channel 0, PIR thermopile, millivolts.
adc2 = 16-bit ADC channel 0, Tcase, millivolts.
adc3 = 16-bit ADC channel 0, Tdome, millivolts.


High mode output
1: nrec yyyy MM dd hh mm ss mode Theadmv shadow threshold  pitch roll adc0 adc1 adc2 adc3
2: global 2--7 narrow band channels in millivolts
3: global 2--7 narrow band channels in millivolts
4: global1, bin1,...bin11,bin12,... bin23, global1 is the broadband channel, in millivolts
5: global2, bin1,...bin11,bin12,... bin23, global1 for 415 nm in millivolts
6: global3, bin1,...bin11,bin12,... bin23, global1 for 500 nm in millivolts
7: global4, bin1,...bin11,bin12,... bin23, global1 for 615 nm in millivolts
8: global5, bin1,...bin11,bin12,... bin23, global1 for 675 nm in millivolts
9: global6, bin1,...bin11,bin12,... bin23, global1 for 872 nm in millivolts
10:global7, bin1,...bin11,bin12,... bin23, global1 for 940 nm in millivolts
========\n";
close HDR;
# ============ DATA PROCESSING PARAMETERS ===========
$SampleFlag = 0;		# 0=standard   1=start at first sample time.

#====================
# OTHER GLOBAL VARIABLES
#====================
use constant YES => 1;
use constant NO => 0;
use constant PI => 3.14159265359;


my $cmd = "\@VARS = ('a000'";
for($i=1; $i<=7; $i++){
	for($j=1; $j<=23; $j++){
		$cmd=$cmd.sprintf ",'a%d%02d'",$i,$j;
	}
}
$cmd=$cmd.');';
eval $cmd;



# CLEAR ACCUMULATOR ARRAYS
ClearAccumulatorArrays();		# Prepare for averaging first record

# WAIT FOR THE FIRST RECORD -- the process is in hold until the first good record come in.
$N_H = 0;    #N_H is the count of H modes in a full sample.

$dt=now();
@jd=dt2jdf($dt);
$jdold=int($jd[1]);
@dt=datevec($dt);
$avgoutfile=sprintf"$datapath/prp_avg_%4d%02d%02d.txt",$dt[0],$dt[1],$dt[2];
#$rawoutfile=sprintf"$datapath/prp_raw_%4d%02d%02d.txt",$dt[0],$dt[1],$dt[2];


$Nsweeps=0;
while ( ReadNextRecord($datapath) == NO ) {};
AccumulateStats();

##=================
## SAMPLE TIME MARKS
##==============
my ($dt_samp,$dt1,$dt2);
($dt_samp, $dt1, $dt2) = ComputeSampleEndPoints ( now(), $avgsecs, $SampleFlag);
#printf"<<NEXT SAMPLE: dt_samp=%s, dt1=%s, dt2=%s>>\r\n", dtstr($dt_samp,'short'), dtstr($dt1,'short'), dtstr($dt2,'short');

#================
# BEGIN THE MAIN SAMPLING LOOP
# ===============
while ( 1 ) {
	#=====================
	# FILE NAMES
	#=====================
	$dt=now();
	@jd=dt2jdf($dt);
	if(int($jd[1]) != $jdold){
		$jdold=int($jd[1]);
		@dt=datevec($dt);
		#print"new day\n";
		$avgoutfile=sprintf"$datapath/prp_avg_%4d%02d%02d.txt",$dt[0],$dt[1],$dt[2];
		#print"New avg file $avgoutfile\n";
		#$rawoutfile=sprintf"$datapath/prp_raw_%4d%02d%02d.txt",$dt[0],$dt[1],$dt[2];
		#print"New raw file $rawoutfile\n";
	}

	#=====================
	# PROCESS ALL RECORDS IN AVG TIME
	#=====================
 	while ( 1 ) {
		#---READ NEXT RECORD (loop)---
		while ( ReadNextRecord($datapath) == NO )	{}
		#---NEW RECORD, CHECK FOR END---
		if ( $record{dt} >= $dt2 ) { last; }
		else {		
# 			AccumulateStats();
		}
	}
	#====================
	# COMPUTE SAMPLE STATS
	#====================
# 	ComputeStats();
# 	
# 	SaveStats($dt_samp, $datapath);
# 	$Nsweeps=0;
# 	if ( $record{mode} == 1 ) {$N_H=1} else {$N_H=0}
# 	
# 	ClearAccumulatorArrays();		# Prepare for averaging first record
# 	($dt_samp, $dt1, $dt2) = ComputeSampleEndPoints( $record{dt}, $avgsecs, 0);	#increment $dt1 and $dt2 
# 	#v4 printf"NEXT SAMPLE: dt_samp=%s, dt1=%s, dt2=%s\r\n", dtstr($dt_samp,'short'), dtstr($dt1,'short'), dtstr($dt2,'short');
# 	AccumulateStats(); 			# deals with the current record
	#=======================
	# END OF THE LOOP
	#=======================
}
exit(0);


#*************************************************************/
sub ReadNextRecord
{
	my ($datapath, $rawout) = @_;
	
	my ($n, $str, $cmd ,$dtrec, $Nfields, $ftmp, $i, $j, $x);
	my @r;
	my $flag = 0;
	my @dt;	
	
	##==================
	## WAIT FOR INPUT
	## Send out a prompt and wait
	##==================
	print"PRP--\n";
	chomp($str=<STDIN>);
	
	# NOISE 
	if (length($str) < 50) { return (NO) }
	else {
		@av=();
		## COMMANDS
		if ( $str =~ /quit/i ) {print"QUIT PRP avg program\n"; exit 0 }
		$str=~s/[\#]+//g;
		$record{dt} = now();
		$timestamp = dtstr($record{dt},'ISO');
	
			# SPLIT 
		@r=split /[ ]+/, $str;
	# 	$i=0; foreach(@r){print"$i, $_\n"; $i++}
	# 	die;

		$Nfields = $#r;	
		$record{mode}=$r[0];
		$record{thead}=$r[1];
		if($r[0]>0){$record{shadow}=$r[24]}else{$record{shadow}=0}
	
			# pitch and roll
		for($i=2; $i<=3; $i++){
			$n=0; $x=0;
			if($r[$i]>-20 && $r[$i]<20){
				$n++; $x=$r[$i];
			}
			if($r[$i+11]>-20 && $r[$i+11]<20){
				$n++; $x+=$r[$i+11];
			}
			if($n==0){$x=$missing} else{$x=$x/$n}
			push @av,$x;
		}
			# azimuth
		$i=4;
			$n=0; $x=0;
			if($r[$i]>=0 && $r[$i]<=360){
				$n++; $x=$r[$i];
			}
			if($r[$i+11]>=0 && $r[$i+11]<=360){
				$n++; $x+=$r[$i+11];
			}
			if($n==0){$x=$missing} else{$x=$x/$n}
			push @av,$x;

	
			# 16 bit ADC
		for($i=5; $i<=12; $i++){
			$n=0; $x=0;
			if($r[$i]>-100 && $r[$i]<4000){
				$n++; $x=$r[$i];
			}
			if($r[$i+11]>-100 && $r[$i+11]<4000){
				$n++; $x+=$r[$i+11];
			}
			if($n==0){$x=$missing} else{$x=$x/$n}
			push @av,$x;
		}
		#$i=0; foreach(@av){printf"test %3d %.3f\n",$i,$_; $i++}
	
		if($fixedtiltflag == 0){
			%record=(%record,
				p => $av[0]+$pitchcorrection,
				r => $av[1]+$rollcorrection,
				az => $av[2]+$headingcorrection,
			);
		}
		else {
			%record=(%record,
				p => $fixedpitch+0.0001,
				r => $fixedroll+0.0001,
				az => $fixedheading+0.0001
			);
		}
		%record=(%record,
			psp => $av[3],
			pirv => $av[4],
			case => $av[5],
			dome => $av[6],
			batt => $av[10]*$battcal[0]+$battcal[1],
			sw => $av[3]*$pspcal[0]+$pspcal[1],
			pir => $av[4]*$pircal[0]+$pircal[1]
		);
			# T CASE
		if($av[5]<=0){$record{case}=$missing;}
		else {
			$x=log($av[5]);
			$y=$casecal[0]*$x*$x*$x + $casecal[1]*$x*$x + $casecal[2]*$x + $casecal[3];
			if($y<=0){
				$record{tcase}=$missing;
			}else{
				$record{tcase} = 1/$y -273.15;
			}
		}
			# T DOME
		if($av[6]<=0){$record{dome}=$missing;}
		else {
			$x=log($av[6]);
			$y=$domecal[0]*$x*$x*$x + $domecal[1]*$x*$x + $domecal[2]*$x + $domecal[3];
			if($y<=0){
				$record{tdome}=$missing;
			}else{
				$record{tdome} = 1/$y -273.15;
			}
		}
	
		@x = ComputeLongwave($record{pir},$record{tcase},$record{tdome},$Kcoefficient,$sigma,$epsilon,$missing);
		$record{lw}=$x[0];
	
	# 	printf"mode = %d\n", $record{mode};
	# 	printf"Thead = %.2f\n", $record{thead};
	# 	printf"pitch=%.2f\n",$record{p};
	# 	printf"roll=%.2f\n",$record{r};
	# 	printf"heading=%.2f\n",$record{az};
	# 	printf"psp=%.2f  %.2f\n",$record{psp}, $record{sw};
	# 	printf"pir=%.2f   %.2f\n",$record{pirv}, $record{pir};
	# 	printf"case=%.2f   %.2f\n",$record{case}, $record{tcase};
	# 	printf"dome=%.2f   %.2f\n",$record{dome}, $record{tdome};
	# 	printf"lw = %.2f\n", $record{lw};
	# 	printf"batt=%.2f\n",$record{batt};
			# WIPRR -- PRP BASIC DATA
		$str=sprintf"\$WIPRR,%s,%d,%.1f,%.1f,%d,%.2f,%.2f,%.2f,%.2f,%.2f,%.1f,%.1f,%.1f,%.1f*",
		$timestamp,$record{mode},$record{thead},$record{shadow},$ShadowRatioThreshold,$record{sw},$record{lw},
		$record{pir},$record{tcase},$record{tdome},$record{p},$record{r},$record{az},$record{batt};
		$str=$str.NmeaChecksum($str);
		#open F,">>$rawoutfile";
		#print F "$str\n";
		print "$str\n";
				# CHANGE INPUT TYPE -- HIGH TO LOW		
		if ( $record{mode}==0 && $N_H > 0) {
			print"Begin low input, reset Accumulators\n";
			ClearAccumulatorArrays();
			$N_H=0;
		}
				# CHANGE INPUT TYPE -- LOW TO HIGH
		if ( $r[7]==1 && $N_H == 0) {
			print"Begin high input, reset Accumulators\n";
			ClearAccumulatorArrays();
		}
	
			# RECORD ARRAY = missing 
		for( $i=$NHsweeps[0]; $i <= $NHsweeps[1]; $i++) {
			$cmd = sprintf("\$record\{a%03d\} = \$missing;",$i-$NHsweeps[0]);
			eval($cmd);
		}
		
		#===================
		# FILL RECORD ARRAY
		#===================
				# HIGH MODE -- 
		if ( $record{mode}==1 ) {
			## GLOBAL 
			for($i=26; $i<=32; $i++){
				$n=0; $x=0;
				if($r[$i]>0 && $r[$i]<4000){
					$n++; $x=$r[$i];
				}
				if($r[$i+8]>0 && $r[$i+8]<4000){
					$n++; $x+=$r[$i+8];
				}
				if($n==0){$x=$missing} else{$x=$x/$n}
				$cmd=sprintf"\$record{g%d}=\$x;",$i-25;
				eval $cmd;
			}
				# PRINT OUT
			$str=sprintf"\$WIPRG,%s,%.1f",$timestamp,$record{shadow};
			for($i=1; $i<=7; $i++){
				$cmd=sprintf"\$str=\$str.sprintf\",%%.1f\",\$record{g%d};",$i;
				#print"cmd = $cmd\n";
				eval $cmd;
			}
			$str=$str."*";
			$str=$str.NmeaChecksum($str);
			#print F "$str\n";		
			print "$str\n";
			$N_H++;
				
				# HIGH -- SHADOW
			if( $#r > 39 && $record{shadow} >= $ShadowRatioThreshold){
				$i0=40;
				$Nsweeps++;
				for( $i=1; $i<=7; $i++) {
					$str="\$WIPR".sprintf"%d,%s",$i,$timestamp;
					for($j=1; $j<=23; $j++){
						$cmd = sprintf("\$record\{a%d%02d\} = \$r\[%d\];",$i,$j,$i0);
						$i0++;
						#print"$cmd\n";
						eval($cmd);
						$cmd=sprintf"\$str=\$str.sprintf\",%%d\",\$record{a%d%02d};",$i,$j;
						#print"$cmd\n";
						eval $cmd;
					}
					$str=$str."*";
					$str=$str.NmeaChecksum($str);
					#print F "$str\n";
					print "$str\n";
				}
			}
		}
		#close F;
		return (YES);
	}
}

#*************************************************************/
sub ClearAccumulatorArrays
# CLEAR ACCUMULATOR ARRAYS FOR ALL AVERAGING
{
	my ($i, @x, @y);
	#=================
	#	SET UP THE HASHES
	#=================
	my %xx = ( sum => 0, sumsq => 0, n => 0, min => 1e99, max => -1e99 );
	my %yy = ( mn => $missing, std => $missing, n => 0, min => $missing, max => $missing );
	# ---- INITIALIZE HASHES -------
	foreach ( @VARS ) 
	{
		eval "%sum_$_ = %xx;   %samp_$_ = %yy;";
	}
}


#*************************************************************/
sub AccumulateStats
# Add to the sums for statistical averages
# Increments global hash variable %sum_xx(sum, sumsq, n, min, max) where
#  xx = (kt, bb2t3, bb2t2, bb2t1, bb1t3, bb1t2, bb1t1, Vref, bb1ap1, bb1bb2ap2, bb2ap3, kttempcase,
#	wintemp, tt8temp, Vpwr, sw1, sw2, pitch, roll, sog, cog, az, pnitemp, lat, lon, sog, var, kttemp )
{
	my ($d1, $d2, $ii);
	my ($x, $y, $s);
	
		foreach ( @VARS )
		{
			my $zstr = sprintf("\@s = %%sum_%s;  %%sum_%s = Accum (\$record{%s}, \@s);", $_, $_, $_);
			eval $zstr;
		}
	#Test, print out variables.
	
}

#*************************************************************/
sub Accum
# Accum(%hash, $datum);   global: $missing
{
	my ($x, @a) = @_;
	my %r = @a;
	#printf("Accum : %.5f\n", $x);
	if ( $x > $missing )
	{
		$r{sum} += $x;
		$r{sumsq} += $x * $x;
		$r{n}++;
		$r{min} = min($r{min}, $x);
		$r{max} = max($r{max}, $x);
		@a = %r;
	}
	return( @a );
}

#*************************************************************/
sub ComputeStats
# ComputeStats();
{
	my $i;
	my ($mean, $stdev, $n, $x, $xsq);
	
	#====================
	# SCALARS
	# sub (mn, stdpcnt, n, min, max) = stats(sum, sumsq, N, min, max, Nsamp_min);
	#=====================
	foreach ( @VARS ) {
		my $zz = sprintf( "( \$samp_\%s{mn}, \$samp_\%s{std}, \$samp_\%s{n}, \$samp_\%s{min}, \$samp_\%s{max}) =
			stats1 ( \$sum_\%s{sum},  \$sum_\%s{sumsq},  \$sum_\%s{n},  \$sum_\%s{min},  \$sum_\%s{max}, \$Nsamp_min, \$missing );",
			$_,$_,$_,$_,$_,$_,$_,$_,$_,$_);
		eval $zz ;
	}
}
	

#*************************************************************/
sub SaveStats
## Create a string with all the data then save the string to file and print out with framing
{
	my ($dt, $path) = @_;
	my $modecommand=1;
	my $str = dtstr($dt,'iso');
	my $timestr = dtstr($dt,'ssv');
	my ($i,$j,$glavg);
	my ($Thead, $pitch,$pstd,$roll,$rstd);
	my @wmn=();  @wstd=();
	
	## STANDARD OUT FILE
	open(F,">>$avgoutfile") or die;

#                                                       psp	  pir   tcas tdom  sp    sp    sp    sp                     psp    psp
# nrec yyyy MM dd hh mm ss mode thead pitch1 roll1 az1 adc10 adc11 adc12 adc13 adc14 adc15 adc16 adc17 pitch2 roll2 az2 adc20 adc21 adc22 adc23 adc24 adc25 adc26 adc27
#r  0    1   2  3  4  5   6  7    8     9     10     11    12  13     14   15   16    17    18    19    20      21    22    23  24    25     26    27    28    29   30
#a                                0     1     2       3     4                                     11    12      13                                                  22

# shadow threshold  g12 g13 g14 g15 g16 g17 g22 g23 g24 g25 g26 g27
#r   31    32       33  34  35  36  37  38  39  40  41  42  43  44 
#a   23    24       25  26              30  31  32  33          36

# s01 s02 ... s23
#r (45...67)   (68...90)  (91...113)  (114...136)  (137...161) (162...182) (183...205)
#a (37...59)   (60...82)  (83...105)  (106...128)  (129...151) (152...174) (175...197)                                                    (177..199)

# @NL =(8,30);
# @NH=(8,46);
# @NHsweeps=(8,207);
# an example sweep
# 4 2014 09 13 18 19 14 1   39.8  
# -4.0 -2.0 4.6   3.19 -35.23 189.37 185.80 30.94 29.26 377.80 521.77   
# -4.0 -2.0 5.7   3.19 -35.15 189.23 185.44 10.70 10.70 377.82 521.85   
# 47.4 2.3 
# 147.2 97.9 112.0 136.5 170.3 194.7
# 148.0 98.3 112.4 137.0 171.1 195.9 
# 1475 1488 1499 1501 1499 1499 1494 1475 764 146 121 118 156 1016 1471 1478 1482 1480 0 0 0 0 0 
# 977 964 958 959 960 969 979 967 501 97 85 64 108 676 972 984 988 983 0 0 0 0 0 
# 1120 1115 1114 1115 1114 1120 1123 1110 520 63 50 35 80 787 1116 1124 1129 1124 0 0 0 0 0 
# 1366 1365 1366 1367 1366 1370 1371 1353 615 51 32 21 73 953 1361 1369 1374 1370 0 0 0 0 0 
# 1710 1714 1719 1720 1719 1722 1720 1698 793 66 40 34 87 1179 1703 1710 1714 1711 0 0 0 0 0 
# 1949 1979 2000 2005 1998 1993 1986 1957 1042 245 212 203 255 1369 1947 1956 1963 1959 0 0 0 0 0 
# 1750 1778 1799 1805 1798 1793 1786 1759 960 225 190 178 227 1198 1744 1755 1760 1756 0 0 0 0 0



	$Thead = $samp_a000{mn};
	
		# HORIZON MEANS
		# MEAN,STD - pitch,roll,az,adc0,...adc7
	for($i=1; $i<12; $i++){
		$cmd = sprintf( "push(\@wmn, 0.5 * (\$samp_a%03d{mn} + \$samp_a%03d{mn} ));",$i,$i+11);
		eval($cmd);
		# mean std ~ 1/sqrt(2) 
		$cmd = sprintf( "push(\@wstd, 0.353 * (\$samp_a%03d{std} + \$samp_a%03d{std}));",$i,$i+11);
		eval $cmd;
	}
		# use psp for threshold
	$glavg = $wmn[3];
	#printf"glavg = %.0f\n", $glavg;


	
			# HIGH MODE - OUTPUT
	if ($N_H >= $Nsamp_min ) {
	
			# AVERAGE GLOBALS - (25,32) (26,33)...
		my @gl=();
		for($i=25; $i<=30; $i++){
			$cmd = sprintf( "push(\@gl, 0.5 * (\$samp_a%03d{mn} + \$samp_a%03d{mn} );",$i,$i+6);
			eval($cmd);
		}
		
				# PRP SHUTOFF FLAG
		if( ($shutdownflag && $glavg < $shutdownthreshold) || $glavg == $missing )
			{$modecommand = 0} 			# GLAVG LOW, TURN FRSR OFF
			else {$modecommand = -1} 	# GLAVG HIGH OR SHUTDOWNFLAG =0, DO NOTHING , v6a
		
				# OUT        time  thead glavg thold Nsweeps shad std thres pitch,pstd, roll,rstd,  psp, pir,tcase,tdome, modecommand
		$str = sprintf"PRAVH %s   %.1f   %.1f %.1f   %d %.1f %.1f %.1f   %.1f %.1f  %.1f %.1f   %.3f %.3f %.3f %.3f  %d", 
			$timestr,$samp_a000{mn}, $glavg, $shutdownthreshold, 
			$Nsweeps, $samp_a023{mn}, $samp_a023{std}, $samp_a024{mn}, 
			$wmn[0], $wstd[0], $wmn[1], $wstd[1], 
			$wmn[3], $wmn[4],$wmn[5], $wmn[6], $modecommand;
		#<<PRAV 2014 09 13 20 00 00   39.8   3.2 100.0   49 0.0 2.3 -4.0   0.0 -2.0  0.0 3.2   -35.4 0.0  0>>
		printf "<<%s>>\r\n", $str;  ## output to terminal
		printf F "%s\n", $str;  ## to output file
		
		# GLOBAL_1 averages
		$str='';
		for($i=25; $i<=30; $i++) { 
			eval(sprintf("\$str = \$str.sprintf \" %%6.1f\",\$samp_a%03d{mn};",$i));
		}
		print F "$str\n";
		
		# GLOBAL_2 averages
		$str='';
		for($i=31; $i<=36; $i++) { 
			eval(sprintf("\$str = \$str.sprintf \" %%6.1f\",\$samp_a%03d{mn};",$i));
		}
		print F "$str\n";
		
		# SWEEP BINS
		my $k=37;
		for($j=0; $j<7; $j++) {
			$str='';
			for($i=0; $i<23; $i++) { 
				eval(sprintf("\$str = \$str.sprintf \" %%6.1f\", \$samp_a%03d{mn};",$k));
				$k++;
			}
			print F "$str\n";
		}
		
			# LOW MODE OPERATION
	} else {	
				# PRP SHUTOFF FLAG
		if( ($shutdownflag && $glavg > $shutdownthreshold) && $glavg > $missing )
			{$modecommand = 1} 			# GLAVG HIGH, TURN FRSR ON
			else {$modecommand = -1} 	# GLAVG LOW OR SHUTDOWNFLAG =0, DO NOTHING.
		
				# OUT      time  thead glavg thold  pitch,pstd, roll,rstd,  psp, pir, tcase, tdome, modecommand
		$str = sprintf"PRAVL %s   %.1f   %.1f %.1f   %.1f %.1f  %.1f %.1f   %.3f %.3f %.3f %.3f  %d", 
			$timestr,$samp_a000{mn}, $glavg, $shutdownthreshold, 
			$wmn[0], $wstd[0], $wmn[1], $wstd[1], 
			$wmn[3], $wmn[4],$wmn[5], $wmn[6], $modecommand;
		printf "<<%s>>\r\n", $str;  ## output to terminal
		printf F "%s\n", $str;  ## to output file
	}
	close F;
}
